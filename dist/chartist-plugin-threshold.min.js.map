{"version":3,"sources":["chartist-plugin-threshold.js"],"names":["root","factory","define","amd","Chartist","returnExportsGlobal","exports","module","require","this","window","document","createMasks","data","options","projectedThreshold","aboveRect","belowRect","defs","svg","querySelector","elem","width","height","horizontalBars","axisX","projectValue","threshold","chartRect","x1","x","y","fill","axisY","y2","maskUnits","id","maskNames","aboveThresholdID","belowThresholdID","showIndicator","textX","textY","line","group","addClass","x2","y1","style","text","defaultOptions","classNames","aboveThreshold","belowThreshold","plugins","ctThreshold","extend","Math","random","toString","substr","chart","Line","Bar","on","type","element","value","parent","_node","cloneNode","attr","mask"],"mappings":"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","file":"chartist-plugin-threshold.min.js","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([\"chartist\"], function (Chartist) {\n      return (root.returnExportsGlobal = factory(Chartist));\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory(require(\"chartist\"));\n  } else {\n    root['Chartist.plugins.ctThreshold'] = factory(Chartist);\n  }\n}(this, function (Chartist) {\n\n  /**\n   * Chartist.js plugin to divide your Line or Bar chart with a threshold.\n   *\n   */\n  /* global Chartist */\n  (function (window, document, Chartist) {\n    'use strict';\n\n    var defaultOptions = {\n      threshold: 0,\n      showIndicator: false,\n      classNames: {\n        aboveThreshold: 'ct-threshold-above',\n        belowThreshold: 'ct-threshold-below'\n      },\n      maskNames: {\n        aboveThreshold: 'ct-threshold-mask-above',\n        belowThreshold: 'ct-threshold-mask-below'\n      }\n    };\n\n    function createMasks(data, options) {\n      // Select the defs element within the chart or create a new one\n      var defs = data.svg.querySelector('defs') || data.svg.elem('defs');\n      var width = data.svg.width();\n      var height = data.svg.height();\n      var projectedThreshold, aboveRect, belowRect;\n\n      if (!data.options.horizontalBars) {\n        // Project the threshold value on the chart Y axis\n        projectedThreshold =\n          data.chartRect.height() -\n          data.axisY.projectValue(options.threshold) +\n          data.chartRect.y2;\n\n        aboveRect = {\n          x: 0,\n          y: 0,\n          width: width,\n          height: projectedThreshold,\n          fill: 'white'\n        };\n\n        belowRect = {\n          x: 0,\n          y: projectedThreshold,\n          width: width,\n          height: height - projectedThreshold,\n          fill: 'white'\n        };\n      } else {\n        // Project the threshold value on the chart X axis\n        projectedThreshold =\n          data.axisX.projectValue(options.threshold) +\n          data.chartRect.x1;\n\n        aboveRect = {\n          x: projectedThreshold,\n          y: 0,\n          width: width - projectedThreshold,\n          height: height,\n          fill: 'white'\n        };\n\n        belowRect = {\n          x: 0,\n          y: 0,\n          width: projectedThreshold,\n          height: height,\n          fill: 'white'\n        };\n      }\n\n      // Ensure no width, height, x or y values are negative values, as they are invalid\n      if (aboveRect.x < 0) {\n        aboveRect.x = 0;\n      }\n      if (aboveRect.y < 0) {\n        aboveRect.y = 0;\n      }\n      if (aboveRect.width < 0) {\n        aboveRect.width = 0;\n      }\n      if (aboveRect.height < 0) {\n        aboveRect.height = 0;\n      }\n      if (belowRect.x < 0) {\n        belowRect.x = 0;\n      }\n      if (belowRect.y < 0) {\n        belowRect.y = 0;\n      }\n      if (belowRect.width < 0) {\n        belowRect.width = 0;\n      }\n      if (belowRect.height < 0) {\n        belowRect.height = 0;\n      }\n\n      // Create mask for upper part above threshold\n      defs\n        .elem('mask', {\n          x: 0,\n          y: 0,\n          width: width,\n          height: height,\n          maskUnits: 'userSpaceOnUse',\n          id: options.maskNames.aboveThresholdID\n        })\n        .elem('rect', aboveRect);\n\n      // Create mask for lower part below threshold\n      defs\n        .elem('mask', {\n          x: 0,\n          y: 0,\n          width: width,\n          height: height,\n          maskUnits: 'userSpaceOnUse',\n          id: options.maskNames.belowThresholdID\n        })\n        .elem('rect', belowRect);\n\n      // Show a line indicator and label where the threshold is\n      if (options.showIndicator) {\n        // Select the group element within the chart or create a new one\n        var group = data.svg.querySelector('g.ct-indicator') || data.svg.elem('g').addClass('ct-indicator');\n        var textX, textY, line;\n\n        // Project the threshold values for the line and label\n        if (data.options.horizontalBars) {\n          textX = projectedThreshold;\n          textY = 10;\n          line = {\n            x1: projectedThreshold,\n            x2: projectedThreshold,\n            y1: 0,\n            y2: height,\n          };\n        } else {\n          textX = 10;\n          textY = projectedThreshold;\n          line = {\n            x1: 0,\n            x2: width,\n            y1: projectedThreshold,\n            y2: projectedThreshold,\n          };\n        }\n\n        group\n          .elem('text', {\n            x: textX,\n            y: textY,\n            style: 'text-anchor: middle',\n          }, 'ct-label ct-value-label')\n          .text(options.threshold);\n\n        group\n          .elem('line',\n            line,\n            'ct-grid ct-horizontal'\n          );\n      }\n\n      return defs;\n    }\n\n    Chartist.plugins = Chartist.plugins || {};\n    Chartist.plugins.ctThreshold = function (options) {\n\n      options = Chartist.extend({}, defaultOptions, options);\n\n      // Ensure mask names are unique\n      options.maskNames.aboveThresholdID = options.maskNames.aboveThreshold + '-' + Math.random().toString(36).substr(2, 9);\n      options.maskNames.belowThresholdID = options.maskNames.belowThreshold + '-' + Math.random().toString(36).substr(2, 9);\n\n      return function ctThreshold(chart) {\n        if (chart instanceof Chartist.Line || chart instanceof Chartist.Bar) {\n          chart.on('draw', function (data) {\n            if (data.type === 'point') {\n              // For points we can just use the data value and compare against the threshold in order to determine\n              // the appropriate class\n              data.element.addClass(\n                data.value.y >= options.threshold ? options.classNames.aboveThreshold : options.classNames.belowThreshold\n              );\n            } else if (\n              data.type === 'line' ||\n              data.type === 'bar' ||\n              data.type === 'area'\n            ) {\n              // Cloning the original line path, mask it with the upper mask rect above the threshold and add the\n              // class for above threshold\n              // Ensure the cloned path is added as the first element of the parent node\n              // Ref for `elem()`: https://github.com/gionkunz/chartist-js/blob/master/src/scripts/svg.js#L94\n              data.element\n                .parent()\n                .elem(data.element._node.cloneNode(true), {}, '', true)\n                .attr({\n                  mask: 'url(#' + options.maskNames.aboveThresholdID + ')'\n                })\n                .addClass(options.classNames.aboveThreshold);\n\n              // Use the original line path, mask it with the lower mask rect below the threshold and add the class\n              // for below threshold\n              data.element\n                .attr({\n                  mask: 'url(#' + options.maskNames.belowThresholdID + ')'\n                })\n                .addClass(options.classNames.belowThreshold);\n            }\n          });\n\n          // On the created event, create the two mask definitions used to mask the line graphs\n          chart.on('created', function (data) {\n            createMasks(data, options);\n          });\n        }\n      };\n    };\n  }(window, document, Chartist));\n\n  return Chartist.plugins.ctThreshold;\n\n}));\n"]}